
glm::vec3 particles[];
//initialize one particle in each grid cell
//particles have position --> need to go from position to velocity grid index

void initialize_particles(int width, int height, int depth) {
	int particle_index = 0;
	for (int i = 0; i < width; i++) {
		for (int j = 0; j < height; j++) {
			for (int k = 0; k < depth; k++) {
				particles[particle_index] = glm::vec3(i, j, k);
				particle_index++;
			}
		}
	}
}

glm::vec3 interpolate_velocity(glm::vec3 pos) {
	double x0 = floor(pos.x);
	double x1 = ceil(pos.x);
	double y0 = floor(pos.y);
	double y1 = ceil(pos.y);
	double z0 = floor(pos.z);
	double z1 = ceil(pos.z);
	
	double xd = (pos.x - x0) / (x1 - x0);
	double yd = (pos.y - y0) / (y1 - y0);
	double zd = (pos.z - z0) / (z1 - z0);
	
	glm::vec3 c00 = (glm::vec3(vx[x0], vy[y0], vz[z0]) * (1.0 - xd)) + (glm::vec3(vx[x1], vy[y0], vz[z0]) * xd);
	glm::vec3 c01 = (glm::vec3(vx[x0], vy[y0], vz[z1]) * (1.0 - xd)) + (glm::vec3(vx[x1], vy[y0], vz[z1]) * xd);
	glm::vec3 c10 = (glm::vec3(vx[x0], vy[y1], vz[z0]) * (1.0 - xd)) + (glm::vec3(vx[x1], vy[y1], vz[z0]) * xd);
	glm::vec3 c11 = (glm::vec3(vx[x0], vy[y1], vz[z1]) * (1.0 - xd)) + (glm::vec3(vx[x1], vy[y1], vz[z1]) * xd);
	
	glm::vec3 c0 = (c00 * (1.0 - yd)) + (c10 * yd);
	glm::vec3 c1 = (c01 * (1.0 - yd)) + (c11 * yd);
	
	return (c0 * (1.0 - zd)) + (c1 * zd);
}

void update_particles() {
	for (int i = 0; i < particles.size(); i++) {
		position = particles[i];
		particles[i] = particles[i] + interpolate_velocity(particles[i]);
	}
}




int closest_particle(glm::vec3 x) {
	//TODO: return the index of the particle closest to X
}

double square(double n) {
	return n * n;


double phi_p(glm::vec3 x) {
	r = 1; //TODO: adjust value of r to something that makes sense
	x_p = particles[closest_particle(x)];
	return sqrt(square(x[0] - x_p[0]) + square(x[1] - x_p[1]) + square(x[2] - x_p[2])) - r;
}

//TODO: normalize phi so that abs(phi(x)) equals distance from x to closest point on zero isocontour

double S(double phi) {
	double delta_tau = 1; //TODO: adjust this (and also confirm that it's the timestep)
	return phi / sqrt(square(phi) + square(delta_tau));
}

double phi_n 


phi_t + (u * phi_x) + (v * phi_y) = 0.0;
phi_t + S(phi_0)(sqrt(square(phi_x) + square(phi_y)) - 1.0) = 0.0;


double v1m = ((phi_i0-2) - (phi_i0-3)) / delta_x;
double v2m = ((phi_i0-1) - (phi_i0-2)) / delta_x;
double v3m = ((phi_i0) - (phi_i0-1)) / delta_x;
double v4m = ((phi_i0+1) - (phi_i0)) / delta_x;
double v5m = ((phi_i0+2) - (phi_i0+1)) / delta_x;

double v1p = ((phi_i0+3) - (phi_i0+2)) / delta_x;
double v2p = ((phi_i0+2) - (phi_i0+1)) / delta_x;
double v3p = ((phi_i0+1) - (phi_i0)) / delta_x;
double v4p = ((phi_i0) - (phi_i0-1)) / delta_x;
double v5p = ((phi_i0-1) - (phi_i0-2)) / delta_x;

double S1(double v1, double v2, double v3) {
	return ((13.0/12.0) * square(v1 - (2.0 * v2) + v3)) + (0.25 * square(v1 - (4.0 * v2) + (3.0 * v3)));
}
double S2(double v2, double v3, double v4) {
	return ((13.0/12.0) * square(v2 - (2.0 * v3) + v4)) + (0.25 * square(v2 - v4));
}
double S3(double v3, double v4, double v5) {
	return ((13.0/12.0) * square(v3 - (2.0 * v4) + v5)) + (0.25 * square((3.0 * v3) - (4.0 * v4) + v5));
}

double epsilon = 0.00001;
double a1m = 0.1 * (1.0 / square(epsilon + S1(v1m, v2m, v3m)));
double a1p = 0.1 * (1.0 / square(epsilon + S1(v1p, v2p, v3p)));
double a2m = 0.6 * (1.0 / square(epsilon + S2(v2m, v3m, v4m)));
double a2p = 0.6 * (1.0 / square(epsilon + S2(v2p, v3p, v4p)));
double a3m = 0.3 * (1.0 / square(epsilon + S3(v3m, v4m, v5m)));
double a3p = 0.3 * (1.0 / square(epsilon + S3(v3p, v4p, v5p)));

double a_sum_m = a1m + a2m + a3m;
double a_sum_p = a1p + a2p + a3p;

double w1m = a1m / a_sum_m;
double w1p = a1p / a_sum_p;
double w2m = a2m / a_sum_m;
double w2p = a2p / a_sum_p;
double w3m = a3m / a_sum_m;
double w3p = a3p / a_sum_p;

phi_x_i0_m = (w1m*((v1m/3.0) - ((7.0*v2m)/6.0) + ((11.0*v3m)/6.0)))
			+ (w2m*((v2m/-6.0) + ((5.0*v3m)/6.0) + (v4m/3.0)))
			+ (w3m*((v3m/3.0) + ((5.0*v4m)/6.0) + (v5m/-6.0)));
			
phi_x_i0_p = (w1p*((v1p/3.0) - ((7.0*v2p)/6.0) + ((11.0*v3p)/6.0)))
			+ (w2p*((v2p/-6.0) + ((5.0*v3p)/6.0) + (v4p/3.0)))
			+ (w3p*((v3p/3.0) + ((5.0*v4p)/6.0) + (v5p/-6.0)));
			
solve phi_t + u*phi_x + v*phi_y = 0;
If u_i0 > 0, use phi_x_m. If u_i0 < 0, use phi_x_p.
	Same applies for v and phi_y